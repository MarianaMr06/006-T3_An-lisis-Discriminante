# Ploteamos la predicción vs los datos de test o reales
plot(resultado1[[4]], col = "red", lwd = 2, main = "Predicción vs real")
lines(test, col = "blue", lwd = 2, lty = 2)
#Now... let us use the Log of the series:
train <- window(dif_near, start = c(1999,1), end = c(2018,4))
test <- window(dif_near, start = c(2019,1))
pinto1 <- auto.arima(train, approximation = FALSE, trace = T)
summary(pinto1)
resultado1 <- forecast(pinto1, h = 12*3)
# Ploteamos la predicción vs los datos de test o reales
plot(resultado1[[4]], col = "red", lwd = 2, main = "Predicción vs real")
lines(test, col = "blue", lwd = 2, lty = 2)
source("~/Tec de Monterrey/Clases/5to Semestre/Introduction to Econometrics/Class8New.R", echo=TRUE)
# Ploteamos la predicción vs los datos de test o reales
plot(resultado1[[4]], col = "red", lwd = 2, main = "Predicción vs real")
#Now... let us use the Log of the series:
train <- window(dif_near, start = c(1999,1), end = c(2018,4))
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
rm(list=ls())
#libraries
library(astsa)
library(tseries)
library(lubridate)
library(tidyverse)
library("tsdl")
library("TTR")
library("forecast")
library("dplyr")
near <- read.csv("EvidenceTimeSeries.csv")
str(near)
#As Time Series
near_time <- ts(near$IED_Flujos, start = c(1999, 1), frequency = 4)
near_time
#To understand the behavior of our data set
plot(near_time)
#We make it stationary
dif_near <- diff(near_time, lag = 1, differences = 1)
adf.test(dif_near, alternative = "stationary")
plot(dif_near)
#ARIMA with auto.arima()
#We have to remember that we already did 2 differentations
arima_near <- auto.arima(dif_near ,stationary=T, seasonal=F, stepwise=T)
summary(arima_near)
tsdiag(arima_near)
Box.test(residuals(arima_near), type = "Ljung-Box")
#It is non significant which is good, our model adjust well
#Significa que tenemos una media igual a 0, varianza constante y no está seriamente correlacionada
arima_error <- residuals(arima_near)
plot(arima_error)
#Tiene media igual a 0 que es bueno
#SARIMA
#We have to remember that we already did 2 differentations
sarima_near <- auto.arima(dif_near, stationary=T, seasonal=T, stepwise=T)
summary(sarima_near)
tsdiag(sarima_near)
Box.test(residuals(sarima_near), type = "Ljung-Box")
#It is non significant which is good, our model adjust well
#Significa que tenemos una media igual a 0, varianza constante y no está seriamente correlacionada
sarima_error <- residuals(sarima_near)
plot(sarima_error)
#Tiene media igual a 0 que es bueno
#Now... let us use the Log of the series:
train <- ts(dif_near, start = c(1999,1), end = c(2018,4), frequency = 4)
test <- window(dif_near, start = c(1999,1))
pinto1 <- auto.arima(train, approximation = FALSE, trace = T, seasonal = F)
summary(pinto1)
resultado1 <- forecast(pinto1, h = 5*4)
# Ploteamos la predicción vs los datos de test o reales
plot(resultado1[[4]], col = "red", lwd = 2, main = "Predicción vs real")
lines(test, col = "blue", lwd = 2, lty = 2)
#Now... let us use the Log of the series:
train <- window(dif_near, start = c(1999,1), end = c(2018,4))
test <- window(dif_near, start = c(2019,1))
pinto1 <- auto.arima(train, approximation = FALSE, trace = T)
summary(pinto1)
resultado1 <- forecast(pinto1, h = 20)
# Ploteamos la predicción vs los datos de test o reales
plot(resultado1[[4]], col = "red", lwd = 2, main = "Predicción vs real")
lines(test, col = "blue", lwd = 2, lty = 2)
#Now... let us use the Log of the series:
train <- window(dif_near, start = c(1999,1), end = c(2018,4))
test <- window(dif_near, start = c(2019,1))
pinto1 <- auto.arima(train, approximation = FALSE, trace = T)
summary(pinto1)
resultado1 <- forecast(pinto1, h = 15)
# Ploteamos la predicción vs los datos de test o reales
plot(resultado1[[4]], col = "red", lwd = 2, main = "Predicción vs real")
lines(test, col = "blue", lwd = 2, lty = 2)
# Convertir tus datos en una serie temporal con frecuencia trimestral
train_ts <- ts(train, frequency = 4)
test_ts <- ts(test, frequency = 4)
# Ajustar el modelo ARIMA
pinto1 <- auto.arima(train_ts, approximation = FALSE, trace = T)
summary(pinto1)
# Realizar las predicciones para 15 trimestres (3 años y 3 trimestres)
resultado1 <- forecast(pinto1, h = 15)
# Ploteamos la predicción vs los datos de test o reales
plot(resultado1[[4]], col = "red", lwd = 2, main = "Predicción vs real")
lines(test_ts, col = "blue", lwd = 2, lty = 2)
# Convertir tus datos en una serie temporal con frecuencia trimestral
train_ts <- ts(train, frequency = 3)
test_ts <- ts(test, frequency = 3)
# Ajustar el modelo ARIMA
pinto1 <- auto.arima(train_ts, approximation = FALSE, trace = T)
summary(pinto1)
# Realizar las predicciones para 15 trimestres (3 años y 3 trimestres)
resultado1 <- forecast(pinto1, h = 15)
# Ploteamos la predicción vs los datos de test o reales
plot(resultado1[[4]], col = "red", lwd = 2, main = "Predicción vs real")
lines(test_ts, col = "blue", lwd = 2, lty = 2)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
rm(list=ls())
#libraries
library(astsa)
library(tseries)
library(lubridate)
library(tidyverse)
library("tsdl")
library("TTR")
library("forecast")
library("dplyr")
near <- read.csv("EvidenceTimeSeries.csv")
str(near)
#As Time Series
near_time <- ts(near$IED_Flujos, start = c(1999, 1), frequency = 4)
near_time
#To understand the behavior of our data set
plot(near_time)
#We make it stationary
dif_near <- diff(near_time, lag = 1, differences = 1)
adf.test(dif_near, alternative = "stationary")
plot(dif_near)
#ARIMA with auto.arima()
#We have to remember that we already did 2 differentations
arima_near <- auto.arima(dif_near ,stationary=T, seasonal=F, stepwise=T)
summary(arima_near)
tsdiag(arima_near)
Box.test(residuals(arima_near), type = "Ljung-Box")
#It is non significant which is good, our model adjust well
#Significa que tenemos una media igual a 0, varianza constante y no está seriamente correlacionada
arima_error <- residuals(arima_near)
plot(arima_error)
#Tiene media igual a 0 que es bueno
#SARIMA
#We have to remember that we already did 2 differentations
sarima_near <- auto.arima(dif_near, stationary=T, seasonal=T, stepwise=T)
summary(sarima_near)
tsdiag(sarima_near)
Box.test(residuals(sarima_near), type = "Ljung-Box")
#It is non significant which is good, our model adjust well
#Significa que tenemos una media igual a 0, varianza constante y no está seriamente correlacionada
sarima_error <- residuals(sarima_near)
plot(sarima_error)
#Tiene media igual a 0 que es bueno
#Now... let us use the Log of the series:
train <- ts(dif_near, start = c(1999,1), end = c(2018,4), frequency = 4)
test <- window(dif_near, start = c(1999,1))
pinto1 <- auto.arima(train, approximation = FALSE, trace = T, seasonal = F)
summary(pinto1)
resultado1 <- forecast(pinto1, h = 5*4)
# Ploteamos la predicción vs los datos de test o reales
plot(resultado1[[4]], col = "red", lwd = 2, main = "Predicción vs real")
lines(test, col = "blue", lwd = 2, lty = 2)
summary(pinto1)
resultado1
# Ploteamos la predicción vs los datos de test o reales
plot(resultado1[[1]], col = "red", lwd = 2, main = "Predicción vs real")
resultado1
# Ploteamos la predicción vs los datos de test o reales
plot(resultado1[[1]], col = "red", lwd = 2, main = "Predicción vs real")
# Ploteamos la predicción vs los datos de test o reales
plot(resultado1[[4]], col = "red", lwd = 2, main = "Predicción vs real")
lines(test, col = "blue", lwd = 2, lty = 2)
# Ploteamos la predicción vs los datos de test o reales
plot(resultado1[[4]], col = "red", lwd = 2, main = "Predicción vs real")
resultado1 <- forecast(arima_near, h = 5*4)
# Ploteamos la predicción vs los datos de test o reales
plot(resultado1[[4]], col = "red", lwd = 2, main = "Predicción vs real")
# Ploteamos la predicción vs los datos de test o reales
plot(resultado1[[4]], col = "red", lwd = 2, main = "Predicción vs real")+
lines(test, col = "blue", lwd = 2, lty = 2)
#Now... let us use the Log of the series:
train <- ts(dif_near, start = c(1999,1), end = c(2018,4), frequency = 4)
test <- window(dif_near, start = c(1999,1))
pinto1 <- auto.arima(train, approximation = FALSE, trace = T, seasonal = F)
summary(pinto1)
resultado1 <- forecast(arima_near, h = 5*4)
# Ploteamos la predicción vs los datos de test o reales
plot(resultado1[[4]], col = "red", lwd = 2, main = "Predicción vs real")+
lines(test, col = "blue", lwd = 2, lty = 2)
# Ploteamos la predicción vs los datos de test o reales
plot(resultado1[[4]], col = "red", lwd = 2, main = "Predicción vs real")
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
rm(list=ls())
#libraries
library(astsa)
library(tseries)
library(lubridate)
library(tidyverse)
library("tsdl")
library("TTR")
library("forecast")
library("dplyr")
near <- read.csv("EvidenceTimeSeries.csv")
str(near)
#As Time Series
near_time <- ts(near$IED_Flujos, start = c(1999, 1), end = c(2018, 4) frequency = 4)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
rm(list=ls())
#libraries
library(astsa)
library(tseries)
library(lubridate)
library(tidyverse)
library("tsdl")
library("TTR")
library("forecast")
library("dplyr")
near <- read.csv("EvidenceTimeSeries.csv")
str(near)
#As Time Series
near_time <- ts(near$IED_Flujos, start = c(1999, 1), end = c(2018, 4), frequency = 4)
near_time
#To understand the behavior of our data set
plot(near_time)
#We make it stationary
dif_near <- diff(near_time, lag = 1, differences = 1)
adf.test(dif_near, alternative = "stationary")
plot(dif_near)
#ARIMA with auto.arima()
#We have to remember that we already did 2 differentations
arima_near <- auto.arima(dif_near ,stationary=T, seasonal=F, stepwise=T)
summary(arima_near)
tsdiag(arima_near)
Box.test(residuals(arima_near), type = "Ljung-Box")
#It is non significant which is good, our model adjust well
#Significa que tenemos una media igual a 0, varianza constante y no está seriamente correlacionada
arima_error <- residuals(arima_near)
plot(arima_error)
#Tiene media igual a 0 que es bueno
#SARIMA
#We have to remember that we already did 2 differentations
sarima_near <- auto.arima(dif_near, stationary=T, seasonal=T, stepwise=T)
summary(sarima_near)
tsdiag(sarima_near)
Box.test(residuals(sarima_near), type = "Ljung-Box")
#It is non significant which is good, our model adjust well
#Significa que tenemos una media igual a 0, varianza constante y no está seriamente correlacionada
sarima_error <- residuals(sarima_near)
plot(sarima_error)
#Tiene media igual a 0 que es bueno
#Now... let us use the Log of the series:
train <- ts(dif_near, start = c(1999,1), end = c(2018,4), frequency = 4)
test <- window(dif_near, start = c(1999,1))
pinto1 <- auto.arima(train, approximation = FALSE, trace = T, seasonal = F)
summary(pinto1)
resultado1 <- forecast(arima_near, h = 5*4)
# Ploteamos la predicción vs los datos de test o reales
plot(resultado1[[4]], col = "red", lwd = 2, main = "Predicción vs real")
lines(test, col = "blue", lwd = 2, lty = 2)
#Now... let us use the Log of the series:
train <- window(dif_near, start = c(1999,1), end = c(2018,4))
test <- window(dif_near, start = c(2019,1))
#Now... let us use the Log of the series:
train <- ts(dif_near, start = c(1999,1), frequency = 4)
test <- window(dif_near, start = c(1999,1))
pinto1 <- auto.arima(train, approximation = FALSE, trace = T, seasonal = F)
pinto1 <- auto.arima(train, approximation = FALSE, trace = T, seasonal = F)
summary(pinto1)
resultado1 <- forecast(arima_near, h = 5*4)
# Ploteamos la predicción vs los datos de test o reales
plot(resultado1[[4]], col = "red", lwd = 2, main = "Predicción vs real")
plot(forecast(arima_near, h 20))
plot(forecast(arima_near, h 20))
plot(forecast(arima_near, h=20))
#lines(near_time)
#ARIMA with auto.arima()
#We have to remember that we already did 2 differentations
arima_near <- auto.arima(dif_near ,stationary=T, seasonal=F, stepwise=T)
summary(arima_near)
tsdiag(arima_near)
Box.test(residuals(arima_near), type = "Ljung-Box")
#ARIMA with auto.arima()
#We have to remember that we already did 2 differentations
arima_near <- auto.arima(dif_near ,stationary=T, seasonal=F, stepwise=T)
summary(arima_near)
#Now... let us use the Log of the series:
train <- ts(dif_near, start = c(1999,1), end = c(2018,4), frequency = 4)
test <- window(dif_near, start = c(1999,1))
pinto1 <- auto.arima(train, approximation = FALSE, trace = T, seasonal = F)
summary(pinto1)
resultado1 <- forecast(arima_near, h = 5*4)
# Ploteamos la predicción vs los datos de test o reales
plot(resultado1[[4]], col = "red", lwd = 2, main = "Predicción vs real")+
lines(test, col = "blue", lwd = 2, lty = 2)
#Now... let us use the Log of the series:
train <- ts(dif_near, start = c(1999,1), end = c(2018,4), frequency = 4)
test <- window(dif_near, start = c(1999,1))
pinto1 <- auto.arima(train, approximation = FALSE, trace = T, seasonal = F)
summary(pinto1)
resultado1 <- forecast(arima_near, h = 5*4)
# Ploteamos la predicción vs los datos de test o reales
plot(resultado1[[4]], col = "red", lwd = 2, main = "Predicción vs real")
lines(test, col = "blue", lwd = 2, lty = 2)
#Now... let us use the Log of the series:
train <- ts(dif_near, start = c(1999,1), end = c(2018,4), frequency = 4)
test <- window(dif_near, start = c(1999,1))
pinto1 <- auto.arima(train, approximation = FALSE, trace = T)
summary(pinto1)
resultado1 <- forecast(arima_near, h = 5*4)
# Ploteamos la predicción vs los datos de test o reales
plot(resultado1[[4]], col = "red", lwd = 2, main = "Predicción vs real")
lines(test, col = "blue", lwd = 2, lty = 2)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
rm(list=ls())
#libraries
library(astsa)
library(tseries)
library(lubridate)
library(tidyverse)
library("tsdl")
library("TTR")
library("forecast")
library("dplyr")
near <- read.csv("EvidenceTimeSeries.csv")
str(near)
#As Time Series
near_time <- ts(near$IED_Flujos, start = c(1999, 1), frequency = 4)
near_time
#To understand the behavior of our data set
plot(near_time)
#We make it stationary
dif_near <- diff(near_time, lag = 1, differences = 1)
adf.test(dif_near, alternative = "stationary")
plot(dif_near)
#ARIMA with auto.arima()
#We have to remember that we already did 2 differentations
arima_near <- auto.arima(dif_near ,stationary=T, seasonal=F, stepwise=T)
summary(arima_near)
tsdiag(arima_near)
Box.test(residuals(arima_near), type = "Ljung-Box")
#It is non significant which is good, our model adjust well
#Significa que tenemos una media igual a 0, varianza constante y no está seriamente correlacionada
arima_error <- residuals(arima_near)
plot(arima_error)
#Tiene media igual a 0 que es bueno
#SARIMA
#We have to remember that we already did 2 differentations
sarima_near <- auto.arima(dif_near, stationary=T, seasonal=T, stepwise=T)
summary(sarima_near)
tsdiag(sarima_near)
Box.test(residuals(sarima_near), type = "Ljung-Box")
#It is non significant which is good, our model adjust well
#Significa que tenemos una media igual a 0, varianza constante y no está seriamente correlacionada
sarima_error <- residuals(sarima_near)
plot(sarima_error)
#Tiene media igual a 0 que es bueno
summary(arima_near)
#Forecast with the best one (ARIMA)
forecast(arima_near, h = 27)
plot(forecast(arima_near, h = 27))
source("~/Tec de Monterrey/Clases/5to Semestre/Introduction to Econometrics/Class8New.R", echo=TRUE)
train <- window(near_time, start = c(2003,1), end = c(2011,12))
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
rm(list=ls())
#libraries
library(astsa)
library(tseries)
library(lubridate)
library(tidyverse)
library("tsdl")
library("TTR")
library("forecast")
library("dplyr")
near <- read.csv("EvidenceTimeSeries.csv")
str(near)
#As Time Series
near_time <- ts(near$IED_Flujos, start = c(1999, 1), frequency = 4)
near_time
#To understand the behavior of our data set
plot(near_time)
#We make it stationary
dif_near <- diff(near_time, lag = 1, differences = 1)
adf.test(dif_near, alternative = "stationary")
plot(dif_near)
#ARIMA with auto.arima()
#We have to remember that we already did 2 differentations
arima_near <- auto.arima(dif_near ,stationary=T, seasonal=F, stepwise=T)
summary(arima_near)
tsdiag(arima_near)
Box.test(residuals(arima_near), type = "Ljung-Box")
#It is non significant which is good, our model adjust well
#Significa que tenemos una media igual a 0, varianza constante y no está seriamente correlacionada
arima_error <- residuals(arima_near)
plot(arima_error)
#Tiene media igual a 0 que es bueno
#SARIMA
#We have to remember that we already did 2 differentations
sarima_near <- auto.arima(dif_near, stationary=T, seasonal=T, stepwise=T)
summary(sarima_near)
tsdiag(sarima_near)
Box.test(residuals(sarima_near), type = "Ljung-Box")
#It is non significant which is good, our model adjust well
#Significa que tenemos una media igual a 0, varianza constante y no está seriamente correlacionada
sarima_error <- residuals(sarima_near)
plot(sarima_error)
#Tiene media igual a 0 que es bueno
#Forecast with the best one (ARIMA)
forecast(arima_near, h = 27)
plot(forecast(arima_near, h = 27))
train <- window(near_time, start = c(2003,1), end = c(2011,12))
test <- window(near_time, start = c(2012,1))
pinto <- auto.arima(train, approximation = FALSE,
trace = T,stationary = F,seasonal=T,
stepwise=T)
summary(pinto)
resultado <- forecast(pinto, h = 12*3)
#We will plot the results of the forecast vs the true values:
plot(resultado$mean, col = "red", lwd = 2, main = "Predicted vs Real")
lines(test, col = "blue", lwd = 2, lty = 2)
resultado
resultado <- forecast(pinto, h = 28)
resultado
train <- window(dif_near, start = c(1999,1), end = c(2018,4))
test <- window(dif_near, start = c(2019,1))
pinto <- auto.arima(train, approximation = FALSE,
trace = T,stationary = F,seasonal=T,
stepwise=T)
summary(sarima_near)
resultado <- forecast(pinto, h = 28)
resultado
plot(resultado$Point_Forecast, col = "red", lwd = 2, main = "Predicted vs Real")
plot(resultado$mean, col = "red", lwd = 2, main = "Predicted vs Real")
lines(test, col = "blue", lwd = 2, lty = 2)
#Forecast with the best one (ARIMA)
forecast(arima_near, h = 15)
plot(forecast(arima_near, h = 15))
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
#To understand the behavior of our data set
plot(near_time)
adf.test(dif_near, alternative = "stationary")
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
rm(list=ls())
#libraries
library(astsa)
library(tseries)
library(lubridate)
library(tidyverse)
library("tsdl")
library("TTR")
library("forecast")
library("dplyr")
near <- read.csv("EvidenceTimeSeries.csv")
#As Time Series
near_time <- ts(near$IED_Flujos, start = c(1999, 1), frequency = 4)
near_time
#To understand the behavior of our data set
plot(near_time)
#We make it stationary
dif_near <- diff(near_time, lag = 1, differences = 1)
adf.test(dif_near, alternative = "stationary")
plot(dif_near)
#ARIMA with auto.arima()
#We have to remember that we already did 2 differentations
arima_near <- auto.arima(dif_near ,stationary=T, seasonal=F, stepwise=T)
summary(arima_near)
tsdiag(arima_near)
Box.test(residuals(arima_near), type = "Ljung-Box")
#It is non significant which is good, our model adjust well
#Significa que tenemos una media igual a 0, varianza constante y no está seriamente correlacionada
arima_error <- residuals(arima_near)
plot(arima_error)
#Tiene media igual a 0 que es bueno
#SARIMA
#We have to remember that we already did 2 differentations
sarima_near <- auto.arima(dif_near, stationary=T, seasonal=T, stepwise=T)
summary(sarima_near)
tsdiag(sarima_near)
Box.test(residuals(sarima_near), type = "Ljung-Box")
#It is non significant which is good, our model adjust well
#Significa que tenemos una media igual a 0, varianza constante y no está seriamente correlacionada
sarima_error <- residuals(sarima_near)
plot(sarima_error)
#Tiene media igual a 0 que es bueno
#Forecast with the best one (ARIMA)
forecast(arima_near, h = 27)
plot(forecast(arima_near, h = 27))
#ARIMA with auto.arima()
#We have to remember that we already did 2 differentations
arima_near <- auto.arima(dif_near ,stationary=T, seasonal=F, stepwise=T)
summary(arima_near)
install.packages(dplyr)
"dplyr"
source("~/.active-rstudio-document")
#Librerías
install.packages(tidyverse)
source("~/.active-rstudio-document")
install.packages("tidyverse")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
library(car)
#Data base
car <- read.csv("car_data.csv")
setwd("C:/Users/maria/OneDrive/Documentos/Tec de Monterrey/Clases/5to Semestre/Minería de Datos/006 T3_Análisis Discriminante")
source("~/Tec de Monterrey/Clases/5to Semestre/Minería de Datos/006 T3_Análisis Discriminante/Regresion.R")
gender <- cor(car$Gender, car$Purchase) #0.72
car <- car %>%
mutate(Gender_Male = ifelse(Gender == "Male", 1, 0))
gender <- cor(car$Gender, car$Purchase) #0.72
gender <- cor(car$Gender_Male, car$Purchase) #0.72
Age <- cor(car$Age, car$Purchase) #0.72
Salary <- cor(car$AnnualSalary, car$Purchase) #0.72
